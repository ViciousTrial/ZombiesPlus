plugins {
    id 'com.github.johnrengelman.shadow'
}

project.ext.set("mod_version", rootProject.ext.modVersion)


version = rootProject.ext.modVersion

def generatedResources = file("src/generated")

loom {
    forge {
        mixinConfig "${project.mod_id}.modMixins.json"
    }

    runs {
        data {
            data()
            programArgs "--all", "--mod", project.mod_id
            programArgs "--output", generatedResources.absolutePath
            programArgs "--existing", file("src/main/resources").absolutePath
        }
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    forge "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-forge:$rootProject.architectury_api_version"

   //s modImplementation "dev.isxander:yet-another-config-lib:${yacl_version}"

    modApi "me.shedaniel.cloth:cloth-config-forge:${cloth_config_version}"
    

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand(
            version: version,
            minecraft_version: minecraft_version,
            minecraft_version_range: minecraft_version_range,
            forge_version: forge_version,
            forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id,
            mod_name: mod_name,
            mod_license: mod_license,
            mod_version: mod_version,
            mod_authors: mod_authors,
            mod_description: mod_description,
            mod_version_number: mod_version_number,
            architectury_api_version: architectury_api_version,
            cloth_config_version: cloth_config_version
        )
    }
}

sourceSets {
    main {
        resources.srcDir generatedResources
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
